head(crime_data)
crime_data <- crime_data[, which(colMeans(is.na(crime_data)) <= 0.90)]
head(crime_data)
crime_data <- crime_data[, which(colMeans(is.na(crime_data)) <= 0.1)]
head(crime_data)
crime_data[crime_data == "?"] <- "na"
colSums(is.na(crime_data))
crime_data <- crime_data[, which(colMeans(is.na(crime_data)) <= 0.1)]
head(crime_data)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
head(crime_data)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Display the first few rows of the filtered data
head(crime_data_filtered)
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
install.packages("mice")
install.packages("readr")
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
install.packages("readr")
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Display the first few rows of the filtered data
head(crime_data_filtered)
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
head(crime_imputed_data)
# Install and load the ggcorrplot package
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Compute the correlation matrix
cor_matrix <- cor(crime_data, use = "pairwise.complete.obs")
# Install and load the ggcorrplot package
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset <- crime_data[, -which(names(crime_data) == "communityname")]
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE)
install.packages("ggcorrplot")
#see cor_matrix
cor_matrix
#see cor_matrix
cor_matrix
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE)
# Install and load the ggcorrplot package
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset <- crime_data[, -which(names(crime_data) == "communityname")]
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE)
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE) +
theme(plot.title = element_text(size = rel(1.5)),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
axis.title = element_text(size = rel(1.3)),
legend.text = element_text(size = rel(1.2)),
legend.title = element_text(size = rel(1.3)))
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE,
ggtheme = theme_bw(base_size = 30),
plot.width = 50, plot.height = 50) +
theme(plot.title = element_text(size = rel(1.5)),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
axis.title = element_text(size = rel(1.3)),
legend.text = element_text(size = rel(1.2)),
legend.title = element_text(size = rel(1.3)))
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
install.packages("readr")
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset <- crime_data[, -which(names(crime_data) == "communityname")]
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE,
ggtheme = theme_bw(base_size = 30, base_family = ""),
hc.order = TRUE) +
theme(plot.title = element_text(size = rel(1.5)),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
axis.title = element_text(size = rel(1.3)),
legend.text = element_text(size = rel(1.2)),
legend.title = element_text(size = rel(1.3))) +
coord_fixed(ratio = 1/2, ylim = c(0, ncol(cor_matrix) + 0.5))
install.packages("mice")
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
install.packages(c("ggcorrplot", "ggplot2"))
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset <- crime_data[, -which(names(crime_data) == "communityname")]
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE,
ggtheme = theme_bw(base_size = 30, base_family = ""),
hc.order = TRUE) +
theme(plot.title = element_text(size = rel(1.5)),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
axis.title = element_text(size = rel(1.3)),
legend.text = element_text(size = rel(1.2)),
legend.title = element_text(size = rel(1.3))) +
coord_fixed(ratio = 1/2, ylim = c(0, ncol(cor_matrix) + 0.5))
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE,
ggtheme = theme_bw(base_size = 30, base_family = ""),
hc.order = TRUE) +
theme(plot.title = element_text(size = rel(1.5)),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
axis.title = element_text(size = rel(1.3)),
legend.text = element_text(size = rel(1.2)),
legend.title = element_text(size = rel(1.3))) +
coord_fixed(ratio = 1/2, ylim = c(0, ncol(cor_matrix) + 0.5))
# Subset the data frame to exclude the 'communityname' column
crime_data_subset <- crime_data[, -which(names(crime_data) == "communityname")]
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE,
ggtheme = theme_bw(base_size = 30, base_family = ""),
hc.order = TRUE) +
theme(plot.title = element_text(size = rel(1.5)),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
axis.title = element_text(size = rel(1.3)),
legend.text = element_text(size = rel(1.2)),
legend.title = element_text(size = rel(1.3))) +
coord_fixed(ratio = 1/2, ylim = c(0, ncol(cor_matrix) + 0.5))
# Subset the data frame to exclude the 'communityname' column
crime_data_subset <- crime_data[, -which(names(crime_data) == "communityname")]
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Create a correlation matrix heatmap using ggcorrplot
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE,
ggtheme = theme_bw(base_size = 30, base_family = "")) +
theme(plot.title = element_text(size = rel(1.5)),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
axis.title = element_text(size = rel(1.3)),
legend.text = element_text(size = rel(1.2)),
legend.title = element_text(size = rel(1.3))) +
coord_fixed(ratio = 1/2, ylim = c(0, ncol(cor_matrix) + 0.5))
cor_matrix
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Find pairs of columns with a correlation coefficient greater than 0.7
high_cor_pairs <- list()
for (i in 1:(ncol(cor_matrix) - 1)) {
for (j in (i + 1):ncol(cor_matrix)) {
if (cor_matrix[i, j] > 0.7) {
high_cor_pairs[[paste0(names(cor_matrix)[i], "-", names(cor_matrix)[j])]] <- cor_matrix[i, j]
}
}
}
# Print the pairs of columns with a correlation coefficient greater than 0.7
high_cor_pairs
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Find pairs of columns with a correlation coefficient greater than 0.7
high_cor_pairs <- list()
for (i in 1:(ncol(cor_matrix) - 1)) {
for (j in (i + 1):ncol(cor_matrix)) {
if (cor_matrix[i, j] > 0.7) {
high_cor_pairs[[paste0(names(cor_matrix)[i], "-", names(cor_matrix)[j])]] <- cor_matrix[i, j]
}
}
high_cor_pairs
high_cor_pairs
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset <- crime_data[, -which(names(crime_data) == "communityname")]
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
cor_matrix
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Find pairs of columns with a correlation coefficient greater than 0.7
high_cor_pairs <- list()
for (i in 1:(ncol(cor_matrix) - 1)) {
for (j in (i + 1):ncol(cor_matrix)) {
if (cor_matrix[i, j] > 0.7) {
high_cor_pairs[[paste0(names(cor_matrix)[i], "-", names(cor_matrix)[j])]] <- cor_matrix[i, j]
}
}
}
high_cor_pairs
cor_matrix <- cor(crime_data_subset, use = "pairwise.complete.obs")
# Find pairs of columns with a correlation coefficient greater than 0.7
high_cor_pairs <- list()
for (i in 1:(ncol(cor_matrix) - 1)) {
for (j in (i + 1):ncol(cor_matrix)) {
if (cor_matrix[i, j] > 0.7) {
high_cor_pairs[[paste0(names(cor_matrix)[i], "-", names(cor_matrix)[j])]] <- cor_matrix[i, j]
}
}
}
# Print the pairs of columns with a correlation coefficient greater than 0.7
high_cor_pairs
print(high_cor_pairs)
cor_matrix
cor_matrix
