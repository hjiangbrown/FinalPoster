install.packages(c("ggcorrplot", "ggplot2"))
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset_imputed <- crime_imputed_data[, -which(names(crime_data) == "communityname")]
colSums(is.na(crime_data_subset_imputed))
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
# Find the indices of highly correlated predictors
high_cor_indices <- findCorrelation(cor(crime_data_subset_imputed), cutoff = 0.7)
colSums(is.na(crime_data_subset_imputed))
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Load the dataset and set the column names
crime_data <- read_csv("crime_data.csv") %>%
set_names(column_names)
install.packages("readr")
install.packages(c("ggcorrplot", "ggplot2"))
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Load the dataset and set the column names
crime_data <- read_csv("crime_data.csv") %>%
set_names(column_names)
# Load the dataset and set the column names
crime_data <- read_csv("crime_data.csv")
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data), 4)) {
crime_data_filtered[[i]] <- as.numeric(crime_data_filtered[[i]])
}
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data_filtered), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data_filtered, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset_imputed <- crime_imputed_data[, -which(names(crime_data) == "communityname")]
colSums(is.na(crime_data_subset_imputed))
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
install.packages("mice")
install.packages(c("ggcorrplot", "ggplot2"))
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data_filtered), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data_filtered, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset_imputed <- crime_imputed_data[, -which(names(crime_data) == "communityname")]
colSums(is.na(crime_data_subset_imputed))
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
print(names(crime_data_subset)[high_cor_indices])
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data_filtered), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data_filtered, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset_imputed <- crime_imputed_data[, -which(names(crime_data) == "communityname")]
colSums(is.na(crime_data_subset_imputed))
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data_filtered), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data_filtered, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset_imputed <- crime_imputed_data[, -which(names(crime_imputed_data) == "communityname")]
colSums(is.na(crime_data_subset_imputed))
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
colSums(is.na(crime_data_subset_imputed))
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
crime_data_subset_imputed
head(crime_data_subset_imputed)
head(crime_data_subset_imputed)
head(crime_data_subset_imputed)
print(crime_data_subset_imputed)
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
library(dplyr)
install.packages(c("ggcorrplot", "ggplot2"))
crime_data <- read_delim("communities.data", delim = ",")
crime_data <- read_delim("communities.data", delim = ",")
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
library(dplyr)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data_filtered), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data_filtered, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset_imputed <- crime_imputed_data[, -which(names(crime_imputed_data) == "communityname")]
colSums(is.na(crime_data_subset_imputed))
# Select only numeric columns
crime_data_subset_imputed <- select_if(crime_data_subset_imputed, is.numeric)
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
# Find the indices of highly correlated predictors
high_cor_indices <- findCorrelation(cor(crime_data_subset_imputed), cutoff = 0.7)
# Print the names of the highly correlated columns
print(names(crime_data_subset_imputed)[high_cor_indices])
library(corrplot)
# Extract the highly correlated columns
high_cor_cols <- crime_imputed_data[, high_cor_indices]
# Create a correlation matrix for the highly correlated columns
high_cor_matrix <- cor(high_cor_cols, use = "pairwise.complete.obs")
# Print the names of the highly correlated columns
print(names(crime_data_subset_imputed)[high_cor_indices])
# Extract the highly correlated columns
high_cor_cols <- crime_data_subset_imputed[, high_cor_indices]
# Create a correlation matrix for the highly correlated columns
high_cor_matrix <- cor(high_cor_cols, use = "pairwise.complete.obs")
# Create a heatmap of the correlation matrix
corrplot(high_cor_matrix, method = "color", type = "lower")
# Create a heatmap of the correlation matrix
corrplot(high_cor_matrix, method = "color", type = "lower",
tl.col = "black", tl.srt = 45,
cl.ratio = 0.15, cl.length = 5,
addrect = 2, rect.col = "red",
order = "hclust",
mar = c(2,2,2,2), # Set the margin size for the plot
width = 20, # Set the width of the plot in inches
height = 20 # Set the height of the plot in inches
)
# Create a ggcorrplot of the correlation matrix
ggcorrplot(high_cor_matrix, type = "lower",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "#FFFFFF", "#E46726"),
lab_size = 4,
title = "Highly Correlated Columns",
title_position = "plot",
hjust = 0.5,
add_labels = TRUE,
label_size = 3,
label_color = "black",
label_round = 2,
legend_title = "Correlation",
legend_title_position = "top",
legend_position = "right",
legend_direction = "vertical",
legend_values = c(0.7, 0.8, 0.9, 1),
diag = TRUE,
hide_corr = FALSE,
outline_color = "black",
outline_size = 0.5,
show_correlation_numbers = TRUE,
cor_method_args = list(na.rm = TRUE),
shrink = 1,
font.label = list(size = 12, color = "black", face = "bold"),
font.legend = list(size = 10, color = "black", face = "bold"),
margins = unit(c(1, 1, 1, 1), "cm"),
ggtheme.minimal = TRUE)
# Create a ggcorrplot of the correlation matrix
ggcorrplot(high_cor_matrix, type = "lower",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "#FFFFFF", "#E46726"),
lab_size = 4,
title = "Highly Correlated Columns",
add = "rect",
label = TRUE,
label_size = 3,
label_color = "black",
label_round = 2,
legend_title = "Correlation",
legend_values = c(0.7, 0.8, 0.9, 1),
legend_position = "bottom",
legend_direction = "horizontal",
hide_cor = TRUE,
outline_color = "black",
outline_size = 0.5,
show_cor_label = TRUE,
shrink = 1,
font.label = list(size = 12, color = "black", face = "bold"),
font.legend = list(size = 10, color = "black", face = "bold"),
margins = unit(c(4, 4, 4, 4), "cm"))
# Create a heatmap of the correlation matrix
corrplot(high_cor_matrix, method = "color", type = "lower",
tl.col = "black", tl.srt = 45,
cl.ratio = 0.15, cl.length = 5,
addrect = 2, rect.col = "red",
order = "hclust",
mar = c(20,20,20,20), # Set the margin size for the plot
width = 200, # Set the width of the plot in inches
height = 200 # Set the height of the plot in inches
)
# Create a heatmap of the correlation matrix
corrplot(high_cor_matrix, method = "color", type = "lower")
# Create a ggcorrplot of the correlation matrix with corrplot style
ggcorrplot(high_cor_matrix, type = "lower",
colors = c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF", "#E0F3F8", "#91BFDB", "#4575B4"),
lab_size = 3,
label = TRUE,
label_size = 2.5,
label_color = "black",
label_round = 2,
legend_title = "Correlation",
legend_position = "bottom",
legend_direction = "horizontal",
hide_cor = TRUE,
outline_color = "black",
outline_size = 0.5,
show_cor_label = TRUE,
shrink = 1,
font.label = list(size = 10, color = "black", face = "bold"),
font.legend = list(size = 8, color = "black", face = "bold"),
margins = unit(c(4, 4, 4, 4), "cm"))
high_cor_matrix
high_cor_cols
# Find the indices of highly correlated predictors
high_cor_indices <- findCorrelation(cor(crime_data_subset_imputed), cutoff = 0.8)
# Print the names of the highly correlated columns
print(names(crime_data_subset_imputed)[high_cor_indices])
# Extract the highly correlated columns
high_cor_cols <- crime_data_subset_imputed[, high_cor_indices]
high_cor_cols
# Find the indices of highly correlated predictors
high_cor_indices <- findCorrelation(cor(crime_data_subset_imputed), cutoff = 0.9)
# Print the names of the highly correlated columns
print(names(crime_data_subset_imputed)[high_cor_indices])
# Extract the highly correlated columns
high_cor_cols <- crime_data_subset_imputed[, high_cor_indices]
# Compute the correlation matrix
cor_matrix <- cor(high_cor_cols, use = "pairwise.complete.obs")
# Create a correlation plot matrix
corrplot(cor_matrix, method = "color",
col = colorRampPalette(c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF", "#E0F3F8", "#91BFDB", "#4575B4"))(100),
type = "lower",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.6,
diag = FALSE,
addCoef.col = "black",
addCoefasPercent = TRUE,
number.cex = 0.6)
# Set plot size
png("correlation_plot.png", width = 1200, height = 1200, res = 150)
# Create a correlation plot matrix
corrplot(cor_matrix, method = "color",
col = colorRampPalette(c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF", "#E0F3F8", "#91BFDB", "#4575B4"))(100),
type = "lower",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.6,
diag = FALSE,
addCoef.col = "black",
addCoefasPercent = TRUE,
number.cex = 0.6)
# Save plot
dev.off()
crime_data <- read_delim("communities.data", delim = ",")
# Install and load the ggcorrplot and ggplot2 packages
install.packages(c("ggcorrplot", "ggplot2"))
library(ggcorrplot)
library(ggplot2)
# Install and load the caret package
install.packages("caret")
library(caret)
install.packages("readr")
library(readr)
# Install and load the mice package
install.packages("mice")
library(mice)
library(dplyr)
library(corrplot)
crime_data <- read_delim("communities.data", delim = ",")
column_names <- c("state", "county", "community", "communityname", "fold", "population", "householdsize", "racepctblack", "racePctWhite", "racePctAsian", "racePctHisp", "agePct12t21", "agePct12t29", "agePct16t24", "agePct65up", "numbUrban", "pctUrban", "medIncome", "pctWWage", "pctWFarmSelf", "pctWInvInc", "pctWSocSec", "pctWPubAsst", "pctWRetire", "medFamInc", "perCapInc", "whitePerCap", "blackPerCap", "indianPerCap", "AsianPerCap", "OtherPerCap", "HispPerCap", "NumUnderPov", "PctPopUnderPov", "PctLess9thGrade", "PctNotHSGrad", "PctBSorMore", "PctUnemployed", "PctEmploy", "PctEmplManu", "PctEmplProfServ", "PctOccupManu", "PctOccupMgmtProf", "MalePctDivorce", "MalePctNevMarr", "FemalePctDiv", "TotalPctDiv", "PersPerFam", "PctFam2Par", "PctKids2Par", "PctYoungKids2Par", "PctTeen2Par", "PctWorkMomYoungKids", "PctWorkMom", "NumIlleg", "PctIlleg", "NumImmig", "PctImmigRecent", "PctImmigRec5", "PctImmigRec8", "PctImmigRec10", "PctRecentImmig", "PctRecImmig5", "PctRecImmig8", "PctRecImmig10", "PctSpeakEnglOnly", "PctNotSpeakEnglWell", "PctLargHouseFam", "PctLargHouseOccup", "PersPerOccupHous", "PersPerOwnOccHous", "PersPerRentOccHous", "PctPersOwnOccup", "PctPersDenseHous", "PctHousLess3BR", "MedNumBR", "HousVacant", "PctHousOccup", "PctHousOwnOcc", "PctVacantBoarded", "PctVacMore6Mos", "MedYrHousBuilt", "PctHousNoPhone", "PctWOFullPlumb", "OwnOccLowQuart", "OwnOccMedVal", "OwnOccHiQuart", "RentLowQ", "RentMedian", "RentHighQ", "MedRent", "MedRentPctHousInc", "MedOwnCostPctInc", "MedOwnCostPctIncNoMtg", "NumInShelters", "NumStreet", "PctForeignBorn", "PctBornSameState", "PctSameHouse85", "PctSameCity85", "PctSameState85", "LemasSwornFT", "LemasSwFTPerPop", "LemasSwFTFieldOps", "LemasSwFTFieldPerPop", "LemasTotalReq", "LemasTotReqPerPop", "PolicReqPerOffic", "PolicPerPop", "RacialMatchCommPol", "PctPolicWhite", "PctPolicBlack", "PctPolicHisp", "PctPolicAsian", "PctPolicMinor", "OfficAssgnDrugUnits", "NumKindsDrugsSeiz", "PolicAveOTWorked", "LandArea", "PopDens", "PctUsePubTrans", "PolicCars", "PolicOperBudg", "LemasPctPolicOnPatr", "LemasGangUnitDeploy", "LemasPctOfficDrugUn", "PolicBudgPerPop", "ViolentCrimesPerPop")
# Replace 'column_names' with the list of column names you have
crime_data <- setNames(crime_data, column_names)
# Replace '?' with NA in the crime_data data frame
crime_data[crime_data == "?"] <- NA
# Calculate the percentage of missing values per column
na_percentage <- sapply(crime_data, function(x) sum(is.na(x)) / length(x))
# Identify columns with 50% or more missing values
columns_to_drop <- names(na_percentage[na_percentage >= 0.5])
# Drop the identified columns
crime_data_filtered <- crime_data[, !(names(crime_data) %in% columns_to_drop)]
# Convert all columns to numeric (excluding 'communityname' column, which is a string)
for (i in setdiff(1:ncol(crime_data_filtered), 4)) {
crime_data[[i]] <- as.numeric(crime_data[[i]])
}
# Perform random imputation
mice_imputed_data <- mice(crime_data_filtered, method = "pmm", m = 1, maxit = 1)
# Extract the imputed data
crime_imputed_data <- complete(mice_imputed_data)
# Display the first few rows of the imputed data
head(crime_imputed_data)
# Subset the data frame to exclude the 'communityname' column
crime_data_subset_imputed <- crime_imputed_data[, -which(names(crime_imputed_data) == "communityname")]
colSums(is.na(crime_data_subset_imputed))
# Select only numeric columns
crime_data_subset_imputed <- select_if(crime_data_subset_imputed, is.numeric)
# Compute the correlation matrix
cor_matrix <- cor(crime_data_subset_imputed, use = "pairwise.complete.obs")
# Find the indices of highly correlated predictors
high_cor_indices <- findCorrelation(cor(crime_data_subset_imputed), cutoff = 0.9)
# Print the names of the highly correlated columns
print(names(crime_data_subset_imputed)[high_cor_indices])
# Extract the highly correlated columns
high_cor_cols <- crime_data_subset_imputed[, high_cor_indices]
# Compute the correlation matrix
cor_matrix <- cor(high_cor_cols, use = "pairwise.complete.obs")
# Set plot size
png("correlation_plot.png", width = 1200, height = 1200, res = 150)
# Create a correlation plot matrix
corrplot(cor_matrix, method = "color",
col = colorRampPalette(c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF", "#E0F3F8", "#91BFDB", "#4575B4"))(100),
type = "lower",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.6,
diag = FALSE,
addCoef.col = "black",
addCoefasPercent = TRUE,
number.cex = 0.6)
# Save plot
dev.off()
